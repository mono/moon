/*
 * type.cpp: Generated code for the type system.
 *
 * Author:
 *   Rolf Bjarne Kvinge (RKvinge@novell.com)
 *
 * Copyright 2007 Novell, Inc. (http://www.novell.com)
 *
 * See the LICENSE file included with the distribution for details.
 * 
 */

#include <config.h>
#include <string.h>
#include <gtk/gtk.h>
#include <cairo.h>
#include <malloc.h>
#include <stdlib.h>
#include "type.h"

#include "runtime.h"
#include "canvas.h"
#include "control.h"
#include "color.h"
#include "shape.h"
#include "transform.h"
#include "animation.h"
#include "downloader.h"
#include "frameworkelement.h"
#include "stylus.h"
#include "rect.h"
#include "text.h"
#include "panel.h"
#include "value.h"
#include "namescope.h"
#include "xaml.h"


bool types_initialized = false;

/*
	Type implementation
*/

Type** Type::types = NULL;
GHashTable* Type::types_by_name = NULL;

Type::Type (const char *name, Type::Kind type, Type::Kind parent)
{
	this->name = strdup (name);
	this->type = type;
	this->parent = parent;

	local_event_count = 0;
	local_event_base = -1;
	type_event_count = -1;
	event_name_hash = NULL;
}

Type::~Type()
{
	if (event_name_hash)
		g_hash_table_destroy (event_name_hash);

	event_name_hash = NULL;

	free (name);
}

void
Type::HideEvent (const char *event_name)
{
	if (event_name_hash)
		g_hash_table_remove (event_name_hash, event_name);
}

void
Type::RegisterEvent (const char *event_name)
{
	if (event_name_hash == NULL)
		event_name_hash = g_hash_table_new_full (strcase_hash, strcase_equal,
							 (GDestroyNotify)g_free,
							 NULL);

	g_hash_table_insert (event_name_hash, g_strdup (event_name), GINT_TO_POINTER (local_event_count++));
}

int
Type::LookupEvent (const char *event_name)
{
	gpointer key, value;
	if (event_name_hash &&
	    g_hash_table_lookup_extended (event_name_hash,
					  event_name,
					  &key,
					  &value)) {

		return GPOINTER_TO_INT (value) + GetEventBase();
	}
	
	if (parent == Type::INVALID) {
		printf ("type lookup of event '%s' failed\n", event_name);
		return -1;
	}
	else {
		return Type::Find (parent)->LookupEvent (event_name);
	}
}

int
Type::GetEventBase ()
{
	if (local_event_base == -1) {
		if (parent == Type::INVALID)
			local_event_base = 0;
		else
			local_event_base = Type::Find(parent)->GetEventCount();
	}

	return local_event_base;
}

int
Type::GetEventCount ()
{
	if (type_event_count == -1)
		type_event_count = GetEventBase() + local_event_count;

	return type_event_count;
}

Type *
Type::RegisterType (const char *name, Type::Kind type, bool value_type)
{
	return RegisterType (name, type, Type::INVALID, NULL, NULL, value_type);
}

Type *
Type::RegisterType (const char *name, Type::Kind type, Type::Kind parent)
{
	return RegisterType (name, type, parent, NULL, NULL, false);
}

void
Type::free_type (gpointer type)
{
	delete (Type*)type;
}

Type *
Type::RegisterType (const char *name, Type::Kind type, Type::Kind parent, create_inst_func *create_inst, const char *content_property)
{
	return RegisterType (name, type, parent, create_inst, content_property, false);
}

Type *
Type::RegisterType (const char *name, Type::Kind type, Type::Kind parent, create_inst_func *create_inst, const char *content_property, bool value_type)
{
	if (types == NULL) {
		types = (Type**)calloc (Type::LASTTYPE, sizeof (Type*));
	}
	if (types_by_name == NULL) {
		types_by_name = g_hash_table_new_full (strcase_hash, strcase_equal,
						       NULL, free_type);
	}

	g_return_val_if_fail (types[type] == NULL, NULL);

	Type *result = new Type (name, type, parent);
	result->value_type = value_type;

	types [type] = result;
	g_hash_table_insert (types_by_name, result->name, result);

	result->create_inst = create_inst;
	result->content_property = content_property;

	return result;
}

bool 
Type::IsSubclassOf (Type::Kind super)
{
	if (type == super)
		return true;

	if (parent == super)
		return true;

	if (parent == Type::INVALID)
		return false;

	Type *parent_type = Find (parent);
	
	if (parent_type == NULL)
		return false;
	
	return parent_type->IsSubclassOf (super);
}

Type *
Type::Find (const char *name)
{
	Type *result;

	if (!types_initialized) {
		fprintf (stderr, "Warning: Moonlight type system is accessed after it has shutdown. It will be reinitialized.\n");
		types_init ();
	}

	if (types_by_name == NULL)
		return NULL;

	result = (Type*) g_hash_table_lookup (types_by_name, name);

	return result;
}

Type *
Type::Find (Type::Kind type)
{
	if (!types_initialized) {
		fprintf (stderr, "Warning: Moonlight type system is accessed after it has shutdown. It will be reinitialized.\n");
		types_init ();
	}

	return types [type];
}

DependencyObject *
Type::CreateInstance ()
{
        if (!create_inst) {
                g_warning ("Unable to create an instance of type: %s\n", name);
                return NULL;
        }

        return create_inst ();
}

const char *
Type::GetContentPropertyName ()
{
	if (content_property)
		return content_property;

	if (parent == Type::INVALID)
		return NULL;

	return Find (parent)->GetContentPropertyName ();
}

void
Type::Shutdown ()
{
	if (types) {
		g_free (types);
		types = NULL;
	}
	if (types_by_name) {
		g_hash_table_destroy (types_by_name);
		types_by_name = NULL;
	}

	types_initialized = false;
}

bool
type_get_value_type (Type::Kind type)
{
	return Type::Find (type)->value_type;
}

DependencyObject *
type_create_instance (Type *type)
{
        return type->CreateInstance ();
}

DependencyObject *
type_create_instance_from_kind (Type::Kind kind)
{
        Type *t = Type::Find (kind);

        if (t == NULL) {
                g_warning ("Unable to create instance of type %d. Type not found.", kind);
                return NULL;
        }

        return t->CreateInstance ();
}


static void 
types_init_manually (void)
{
	// Put types that does not inherit from DependencyObject here (manually)

	//Type::RegisterType ("Invalid", Type::INVALID, Value::INVALID);
	Type::RegisterType ("bool", Type::BOOL, true);
	Type::RegisterType ("double", Type::DOUBLE, true);
	Type::RegisterType ("uint64", Type::UINT64, true);
	Type::RegisterType ("int", Type::INT32, true);
	Type::RegisterType ("string", Type::STRING, false);
	Type::RegisterType ("Color", Type::COLOR, true);
	Type::RegisterType ("Point", Type::POINT, true);
	Type::RegisterType ("Rect", Type::RECT, true);
	Type::RegisterType ("RepeatBehaviour", Type::REPEATBEHAVIOR, true);
	Type::RegisterType ("Duration", Type::DURATION, true);
	Type::RegisterType ("int64", Type::INT64, true);
	Type::RegisterType ("TimeSpan", Type::TIMESPAN, true);
	Type::RegisterType ("KeyTime", Type::KEYTIME, true);
	Type::RegisterType ("double*", Type::DOUBLE_ARRAY, false);
	Type::RegisterType ("Point*", Type::POINT_ARRAY, false);
	Type::RegisterType ("EventObject", Type::EVENTOBJECT, false);
	Type::RegisterType ("TimeSource", Type::TIMESOURCE, Type::EVENTOBJECT);
	Type::RegisterType ("ManualTimeSource", Type::MANUALTIMESOURCE, Type::TIMESOURCE);
	Type::RegisterType ("SystemTimeSource", Type::SYSTEMTIMESOURCE, Type::TIMESOURCE);
	Type::RegisterType ("TimeManager", Type::TIMEMANAGER, Type::EVENTOBJECT);
	Type::RegisterType ("Surface", Type::SURFACE, Type::EVENTOBJECT);
#if 0 && DEBUG
	for (int i = 1; i < Type::LASTTYPE; i++) {
		if (Type::types [i] != NULL)
			continue;

		if (i > 0 && Type::types [i - 1] != NULL)
			printf ("Type %i is not initialized (previous type in enum is '%s')\n", i, Type::types [i - 1]->name);
		else
			printf ("Type %i is not initialized\n", i);
	}
#endif
}

static void 
types_init_register_events (void)
{
	Type* t;

	t = Type::Find (Type::EVENTOBJECT);
	t->RegisterEvent ("Destroyed");

	t = Type::Find (Type::STORYBOARD);
	t->RegisterEvent ("Completed");

	t = Type::Find (Type::TIMEMANAGER);
	t->RegisterEvent ("update-input");
	t->RegisterEvent ("render");

	t = Type::Find (Type::TIMESOURCE);
	t->RegisterEvent ("Tick");

	t = Type::Find (Type::CLOCK);
	t->RegisterEvent ("CurrentTimeInvalidated");
	t->RegisterEvent ("CurrentStateInvalidated");
	t->RegisterEvent ("CurrentGlobalSpeedInvalidated");
	t->RegisterEvent ("Completed");

	t = Type::Find (Type::DOWNLOADER);
	t->RegisterEvent ("Completed");
	t->RegisterEvent ("DownloadProgressChanged");
	t->RegisterEvent ("DownloadFailed");

	t = Type::Find (Type::MEDIABASE);
	t->RegisterEvent ("DownloadProgressChanged");

	t = Type::Find (Type::MEDIAELEMENT);
	t->RegisterEvent ("BufferingProgressChanged");
	t->RegisterEvent ("CurrentStateChanged");
	t->RegisterEvent ("MarkerReached");
	t->RegisterEvent ("MediaEnded");
	t->RegisterEvent ("MediaFailed");
	t->RegisterEvent ("MediaOpened");

	t = Type::Find (Type::IMAGE);
	t->RegisterEvent ("ImageFailed");

	t = Type::Find (Type::IMAGEBRUSH);
	t->RegisterEvent ("DownloadProgressChanged");
	t->RegisterEvent ("ImageFailed");

	t = Type::Find(Type::SURFACE);
	t->RegisterEvent ("Resize");
	t->RegisterEvent ("FullScreenChange");
	t->RegisterEvent ("Error");

	t = Type::Find(Type::UIELEMENT);
	t->RegisterEvent ("Loaded");
	t->RegisterEvent ("MouseMove");
	t->RegisterEvent ("MouseLeftButtonDown");
	t->RegisterEvent ("MouseLeftButtonUp");
	t->RegisterEvent ("KeyDown");
	t->RegisterEvent ("KeyUp");
	t->RegisterEvent ("MouseEnter");
	t->RegisterEvent ("MouseLeave");
	t->RegisterEvent ("Invalidated");
	t->RegisterEvent ("GotFocus");
	t->RegisterEvent ("LostFocus");

	t = Type::Find(Type::COLLECTION);
	t->RegisterEvent ("__moonlight_CollectionChanged");
}

//
// The generated code will be put at the end of the file
//
// We are currently generating:
//	- types_init (), initializes all types that inherit from DependencyObject

